{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABETICALLY","SORT_FIELD_LENGTH","App","visibleGoods","useState","sortField","setSortField","reverseList","setReverseList","makeResetButtonVisible","handleClick","sortBy","array","sortParameter","reverseParameter","sort","a","b","localeCompare","length","reverse","sortGoods","className","type","onClick","prevReverseList","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA4B,iBAC5BC,EAAoB,SAwBbC,EAAM,WACjB,IAAIC,EAAY,UAAOJ,GACvB,EAAkCK,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAuC,KAAdJ,GAAoBE,EAE7CG,EAAc,SAACC,GACnBL,EAAaK,IAUf,OAFAR,EArCgB,SAACS,EAAOC,EAAeC,GACvC,OAAQD,GACN,KAAKb,EAEHY,EAAQ,YAAIA,GAAOG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAClD,MACF,KAAKhB,EAEHW,EAAQ,YAAIA,GAAOG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,OAASF,EAAEE,UAWnD,OALIL,IAEFF,EAAQ,YAAIA,GAAOQ,WAGdR,EAkBQS,CAAUlB,EAAcE,EAAWE,GAGhD,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBjB,IAAcL,EAA4B,WAAa,IACpFwB,QAAS,WACPd,EAAYV,IAJhB,iCAUA,wBACEuB,KAAK,SACLD,UAAS,4BAAuBjB,IAAcJ,EAAoB,WAAa,IAC/EuB,QAAS,WACPd,EAAYT,IAJhB,4BAUA,wBACEsB,KAAK,SACLD,UAAS,4BAAuBf,EAAc,GAAK,YACnDiB,QAAS,WACPhB,GAAe,SAAAiB,GAAe,OAAKA,MAJvC,qBAWChB,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVE,QAAS,WA5CjBlB,EAAa,IACbE,GAAe,IAwCT,sBAYJ,6BACGL,EAAauB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCzGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aeaf8f9f.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABETICALLY = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'length';\n\nconst sortGoods = (array, sortParameter, reverseParameter) => {\n  switch (sortParameter) {\n    case SORT_FIELD_ALPHABETICALLY:\n      // eslint-disable-next-line no-param-reassign\n      array = [...array].sort((a, b) => a.localeCompare(b));\n      break;\n    case SORT_FIELD_LENGTH:\n      // eslint-disable-next-line no-param-reassign\n      array = [...array].sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (reverseParameter) {\n    // eslint-disable-next-line no-param-reassign\n    array = [...array].reverse();\n  }\n\n  return array;\n};\n\nexport const App = () => {\n  let visibleGoods = [...goodsFromServer];\n  const [sortField, setSortField] = useState('');\n  const [reverseList, setReverseList] = useState(false);\n  const makeResetButtonVisible = sortField !== '' || reverseList;\n\n  const handleClick = (sortBy) => {\n    setSortField(sortBy);\n  };\n\n  const handleReset = () => {\n    setSortField('');\n    setReverseList(false);\n  };\n\n  visibleGoods = sortGoods(visibleGoods, sortField, reverseList);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortField !== SORT_FIELD_ALPHABETICALLY ? 'is-light' : ''}`}\n          onClick={() => {\n            handleClick(SORT_FIELD_ALPHABETICALLY);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortField !== SORT_FIELD_LENGTH ? 'is-light' : ''}`}\n          onClick={() => {\n            handleClick(SORT_FIELD_LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${reverseList ? '' : 'is-light'}`}\n          onClick={() => {\n            setReverseList(prevReverseList => !prevReverseList);\n          }}\n\n        >\n          Reverse\n        </button>\n\n        {makeResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              handleReset();\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}